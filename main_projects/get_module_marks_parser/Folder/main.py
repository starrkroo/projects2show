import helper
import telebot
import datetime
import sqlite3
from time import sleep
from telebot import types
from huepy import *
from config import *


token = Config.TOKEN
client = telebot.TeleBot(token, threaded=False)

conn = sqlite3.connect('main.db')
cursor = conn.cursor()

my_id = "749909723"
# my_id = "0"

# boolean variable to check if user want to make registration
to_regist = False

# helper.paste_in_db(my_id, "–ú–∞—Ö–º—É–¥–æ–≤", "–û–º–∞—Ä", "–ú–∞—Ö–º—É–¥–æ–≤–∏—á", "01420")

ids = [k for k in helper.get_all_(ids=True)]

ID_AND_USER = {
    ids[i]: helper.students[i] for i in range(len(ids))
}

def get_id_of(query_name: str):
    for id, name in ID_AND_USER.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
        if helper.get_student(query_name) == name:
            return id

    return -1

def lost_users():
    """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–≤–æ–∏ id –ø—Ä–∏ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
    """
    for k in range(1, 4):
        print(ID_AND_USER[f'empty{k}'])

def fill_in_file(data):
    """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    with open("data.txt", 'a') as f:
        f.write(data)

def send_all(message):
    for user in ids:
        try:
            if "empty" not in user:
                client.send_message(str(user), message)
        except telebot.apihelper.ApiTelegramException:
            pass


errors = {
    "0x00000001": "–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "0x00000002": "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
}


@client.message_handler(commands=['help', 'start'])
def create_reply_buttons(message):
    # –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∞–µ—Ç—Å—è, –ª–∏–±–æ –µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
    global to_regist
    if str(message.chat.id) not in ids:
        client.send_message(message.chat.id, """–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å —Å–ª–µ–¥—É—é—â–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º:
--> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 00110
–ò –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ–ø—É—â–µ–Ω–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏""")
        to_regist = True
        return
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
    start_button = types.KeyboardButton("/start")
    standart_button = types.KeyboardButton("/info")

    markup_reply.add(start_button, standart_button)
    client.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç, {}\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∂–º—è–∫–∞–π —Å—é–¥–∞ /info".format(),
        reply_markup = markup_reply)


@client.message_handler(commands=['get_info', 'info'])
def get_user_query(message):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ (–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥ –≤–≤–æ–¥–æ–º)
    print(orange("<{}> {} ({})".format(datetime.datetime.now(), message.from_user.first_name, message.from_user.id)))

    if message.from_user.id == my_id:
        client.send_message(message.from_user.id, 
            """–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã, —Å–∏—Ä: 
/get <name> -- –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ <name>
/get mean <name> -- –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –±–∞–ª–ª–æ–≤ —É <name>
/get find <name> -- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
/get users -- –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/get -- –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ
/get mean -- –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–µ–º—Ç–∏—á–µ—Å–∫–æ–µ –±–∞–ª–ª–æ–≤ –æ —Å–µ–±–µ"""
            )
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    item_all = types.InlineKeyboardButton(text = "ü©∏ –ú–æ–¥—É–ª—å–Ω—ã–µ".upper(), callback_data = "all")
    item_mean = types.InlineKeyboardButton(text = "ü©∏ –°—Ä–µ–¥–Ω–∏–µ –º–æ–¥—É–ª—å–Ω—ã–µ (–∑–∞—á–µ—Ç/–Ω–µ–∑–∞—á–µ—Ç)".upper(), callback_data = "mean")

    markup_inline.add(item_all, item_mean)
    client.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏:", 
        reply_markup = markup_inline
    )

@client.callback_query_handler(func = lambda call: True)
def answer(call):
    defined_errors = []
    data_send = ''

    if '/get' in call.message.text.lower(): return

    if str(call.message.chat.id) in ID_AND_USER.keys():
        data = helper.generate_response(ID_AND_USER[str(call.message.chat.id)])
        
        if data == {}:
            defined_errors.append("0x00000001")

        data_send = data

        if len(defined_errors) == 0:
            if call.data == 'all':
                for k in data_send.keys():
                    taken = data_send[k]
                    taken = [k for k in taken if k != '' and k.isdigit()]
                    given = taken
                    data_send[k] = given
                client.send_message(call.message.chat.id, '\n\n'.join(helper.correct_show(data_send).split('\n')))
                return
            elif call.data == 'mean':
                data_send = {
                    list(data.keys())[i]:
                    ''.join([k for k in data[list(data.keys())[i]] if not k.isdigit() and k != '']) 
                            if ''.join([k for k in data[list(data.keys())[i]] if not k.isdigit() and k != '']) != '' else "–ù–ï –í–´–°–¢–ê–í–õ–ï–ù–û"
                    for i in range(len(data))
                }
                    # mean = lambda x: (
                    #     sum([int(k) for k in x if k != 0 and k.isdigit()]) \
                    #         /                                               \
                    #     len([k for k in x if k != '' and k.isdigit()]))
                    # data_send = {
                    #         list(data.keys())[i]: 
                    #             str(round(mean(data[list(data.keys())[i]]), 1)) + " (–∑–∞—á–µ—Ç)" if round(mean(data[list(data.keys())[i]]), 1) >= 51 else str(round(mean(data[list(data.keys())[i]]), 1)) + " (–Ω–µ–∑–∞—á–µ—Ç)"
                    #     for i in range(len(data))
                    # }           

    elif str(call.message.chat.id) not in ID_AND_USER.keys():
        defined_errors.append("0x00000002")

    if len(defined_errors) != 0:
        client.send_message(call.message.chat.id, '\n'.join([k + ' ' + errors[k] for k in defined_errors]))
    elif len(defined_errors) == 0:
        data_send = '\n\n'.join(str(helper.correct_show(data_send)).split('\n'))
        client.send_message(call.message.chat.id, data_send)

def update_variables(username, user_id, user_password):
    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —é–∑–µ—Ä
    ID_AND_USER.update({str(user_id): username})
    ids.append(str(user_id))
    helper.USERS.update({username: str(user_password)})

@client.message_handler(content_types = ['text'])
def TAPI(message):
    # my_id = '1'
    global to_regist
    if '/get' not in message.text.lower() and to_regist:
        username = message.text.split()
        try:
            username[3]
        except:
            client.send_message(message.chat.id, "–Ø —á—Ç–æ –ø–ª–æ—Ö–æ –æ–±—ä—è—Å–Ω–∏–ª –¢–µ–±–µ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É?")
            return
        connection = helper.make_query(username[0] + ' ' + username[1] + ' ' + username [2], username[3])
        if connection.url != helper.url:
            helper.paste_in_db(
                str(message.chat.id),
                username[0],
                username[1],
                username[2],
                username[3]
            )
            print(green("<{}> {}").format(datetime.datetime.now(), message.text))
            client.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            update_variables(username[0] + ' ' + username[1] + ' ' + username [2], message.chat.id, username[3])
            to_regist = False
        else:
            client.send_message(message.chat.id, "–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        connection.close()
        return

    # if '/get' not in message.text.lower() or '/get' in message.text.lower() and message.chat.id != my_id:
    if '/' in message.text.lower() and str(message.chat.id) != my_id:
        client.send_message(message.chat.id, message.text)
        return

    keywords = ['mean', 'users', 'find']
    student = ''
    current_keyword = ''.join([k for k in message.text.lower().split() if k in keywords])
    defined_errors = []
    data_send = '' # output data to send user

    if '/get' in message.text.lower() and str(message.chat.id) == my_id: #or len(message.text.lower()) > len('/get'):
        if len([k for k in keywords if k in message.text.lower()]):
            # generate new student's name
            student = message.text.split(current_keyword)[1].strip()
        else:
            student = message.text.split("/get")[1].strip()

        if helper.get_student(student) == -1:
            client.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # generates main output table
        data = helper.generate_response(student)

        # if user is not in list, not exist
        if data == {}:
            defined_errors.append('0x00000001')
        
        if len(defined_errors) == 0:
            # getting those keywords
            if current_keyword == 'mean':
                mean = lambda x: (
                    sum([int(k) for k in x if k != 0 and k.isdigit()]) \
                        /                                               \
                    len([k for k in x if k != '' and k.isdigit()]))
                data_send = {
                    list(data.keys())[i]: 
                    str(round(mean(data[list(data.keys())[i]]), 1)) + " (–∑–∞—á–µ—Ç)" if round(mean(data[list(data.keys())[i]]), 1) >= 51 else str(round(mean(data[list(data.keys())[i]]), 1)) + " (–Ω–µ–∑–∞—á–µ—Ç)"
                for i in range(len(data))}
            elif current_keyword == 'users':
                all_users = helper.get_all_(students = True, passwords = True, ids = True)
                # NOTE: –ø–æ—á–µ–º—É –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?
                users = [str(all_users[k]) for k in range(len(all_users))]
                client.send_message(message.chat.id, '\n'.join(users))
                return
            elif current_keyword == 'find':
                data_send = data
                data_send = str(helper.find(str(get_id_of(student)))) + '\n\n\n' + '\n\n'.join(helper.correct_show(data_send).split('\n'))
                client.send_message(message.chat.id, data_send)
                return
            else:
                data_send = data


            data_send = '\n\n'.join(str(helper.correct_show(data_send)).split('\n'))


    if helper.get_student(student) not in ID_AND_USER.values():
        defined_errors.append("0x00000002")

    if len(defined_errors) != 0:
        client.send_message(message.chat.id, '\n'.join([k + " " + errors[k] for k in defined_errors]))
    elif len(defined_errors) == 0:
        try:
            client.send_message(message.chat.id, data_send)
        except:
            client.send_message(message.chat.id, message.text)

if __name__ == '__main__':
    message = '''
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2.1.1



–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start

–í–ê–ñ–ù–û–ï –ó–ê–ú–ï–ß–ê–ù–ò–ï: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Ç–∞ —Ä–µ–∂–∏–º–µ

–í—Å–µ —Å–≤–µ–∂–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ–º —Ä–∞—Å—Å—ã–ª–∫–æ–π. 
'''
    # send_all(message)


    # https://ru.stackoverflow.com/questions/711998/%D0%9D%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%BE%D0%BA-bot-polling
    # https://habr.com/ru/post/448310/
    # what is mean proxy? if nothing works, try using proxy

    # client.polling(none_stop=True)

    while True:
        try:
            client.polling(none_stop=True)

        except Exception as e:
            print(e)  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ print(e) –µ—Å–ª–∏ —É –≤–∞—Å –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç,
            sleep(15)

    cursor.close()
    conn.close()

